name: DevSecOps Pipeline

on:
  pull_request:
    branches: [master, main]
  workflow_dispatch:

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # - name: Set up JDK 11 # If Java is required for SonarQube scanning
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '11'

      # - name: Cache Sonar dependenciess
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar

      # Normal for common languages
      # - uses: sonarsource/sonarqube-scan-action@v3
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Install sonar-scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
          unzip sonar-scanner-cli-6.2.1.4610-linux-x64.zip
          
          ls -la sonar-scanner-cli-6.2.1.4610-linux-x64

          sudo mv sonar-scanner-cli-6.2.1.4610-linux-x64 /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      # Step 2: Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
 
      # Step 3: Cache Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.yaml')}}
          restore-keys: |
            ${{ runner.os }}-pub-
 
      # Step 4: Install dependencies (Flutter packages)
      - name: Install dependencies
        run: flutter pub get
      # Step 4: Install dependencies (Flutter packages)
      - name: Run tests
        run: flutter test
              # Step 4: Install dependencies (Flutter packages)
      - name: Run tests
        run: flutter test --machine --coverage > tests.output 
        
      - name: Run SonarQube Scan
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
            
  snyk:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Snyk dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/snyk
          key: ${{ runner.os }}-snyk

      - name: Run Snyk to Check for Vulnerabilities
        uses: snyk/actions/node@v1.4.1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Snyk Test for SCA (Dependencies)
        run: snyk test || exit 1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  zap_scan:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download ZAP Context File
        run: |
          mkdir -p .zap
          curl -L -o .zap/context.context "https://raw.githubusercontent.com/your-repo/context.context"

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://your-application-url.com' # Replace with actual app URL
          context_file: '.zap/context.context'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ZAP Scan Results
        if: ${{ failure() }}
        run: echo "ZAP found vulnerabilities"

  codeql:
    runs-on: ubuntu-latest
    needs: [sonarcloud, snyk, zap_scan]
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'java' ] # Adjust based on project requirements

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          config-file: .github/codeql/codeql-config.yml # Optional: Add a custom config file if needed

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2 #test 1 away it goes
