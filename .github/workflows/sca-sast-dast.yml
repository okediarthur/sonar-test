name: DevSecOps Pipeline

on:
  pull_request:
    branches: [master, main]

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11 # If Java is required for SonarQube scanning
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: Cache Sonar dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check SonarCloud Quality Gate
        id: sonar-quality-gate
        uses: sonarsource/sonarcloud-quality-gate-action@v1.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Fail Pipeline if Quality Gate Fails
        if: steps.sonar-quality-gate.outputs.status != 'OK'
        run: exit 1

  snyk:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Snyk dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/snyk
          key: ${{ runner.os }}-snyk

      - name: Run Snyk to Check for Vulnerabilities
        uses: snyk/actions/node@v1.4.1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Snyk Test for SCA (Dependencies)
        run: snyk test || exit 1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  zap_scan:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download ZAP Context File
        run: |
          mkdir -p .zap
          curl -L -o .zap/context.context "https://raw.githubusercontent.com/your-repo/context.context"

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://your-application-url.com' # Replace with actual app URL
          context_file: '.zap/context.context'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ZAP Scan Results
        if: ${{ failure() }}
        run: echo "ZAP found vulnerabilities"

  codeql:
    runs-on: ubuntu-latest
    needs: [sonarcloud, snyk, zap_scan]
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'java' ] # Adjust based on project requirements

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          config-file: .github/codeql/codeql-config.yml # Optional: Add a custom config file if needed

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
